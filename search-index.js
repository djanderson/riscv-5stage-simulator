var N=null,E="",T="t",U="u",searchIndex={};
var R=["riscv_5stage_simulator","pipeline","instruction","Sign extend immediate value.","instructionmemory","datamemory","registerfile","opcode","Decodes RISC-V 32I instructions.","riscv_5stage_simulator::instruction","A read-write data memory.","riscv_5stage_simulator::memory","alu_result","riscv_5stage_simulator::pipeline","register","insn_fetch","IF: Instruction fetch from memory.","insn_decode","EX: Execute operation or calculate address.","access_memory","MEM: Access memory operand.","reg_writeback","WB: Write result back to register.","riscv_5stage_simulator::alu","to_owned","clone_into","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","riscv_5stage_simulator::memory::data","riscv_5stage_simulator::memory::instruction","riscv_5stage_simulator::register","Reads an instruction from `InstructionMemory`.","function","semantics","ifidregister","idexregister","exmemregister","memwbregister","default","fields","formatter","Instruction","Semantics","Function","DataMemory","InstructionMemory","DisassemblyInstructionMemory","TestInstructionMemory","Pipeline","IfIdRegister","IdExRegister","ExMemRegister","MemWbRegister","RegisterFile","Register"];

searchIndex["riscv_5stage_simulator"]={"doc":"Simulator components for RISC-V 32I instruction set.","i":[[0,"alu",R[0],"Arithmetic logic unit.",N,N],[4,"AluOp",R[23],"Available ALU operations.",N,N],[13,"Add",E,E,0,N],[13,"Sub",E,E,0,N],[13,"And",E,E,0,N],[13,"Or",E,E,0,N],[13,"Xor",E,E,0,N],[13,"SetOnLessThan",E,E,0,N],[13,"SetOnLessThanUnsigned",E,E,0,N],[13,"ShiftLeft",E,E,0,N],[13,"ShiftRightLogical",E,E,0,N],[13,"ShiftRightArithmetic",E,E,0,N],[13,"BranchOnEqual",E,E,0,N],[13,"BranchOnNotEqual",E,E,0,N],[13,"BranchOnLessThan",E,E,0,N],[13,"BranchOnLessThanUnsigned",E,E,0,N],[13,"BranchOnGreaterOrEqual",E,E,0,N],[13,"BranchOnGreaterOrEqualUnsigned",E,E,0,N],[4,"AluSrc",E,"Selector for ALU `src2` source.",N,N],[13,"Reg",E,E,1,N],[13,"Imm",E,E,1,N],[5,"alu",E,"Perform one ALU operation.",N,[[[R[2]],["u64"],["i32"]],["i32"]]],[0,"ca_simulator",R[0],"Cycle accurate 5-stage pipelining RISC-V 32I simulator.",N,N],[5,"run","riscv_5stage_simulator::ca_simulator","Runs a cycle accurate RISC-V 32I simulator.",N,[[[R[4]],[R[5]],[R[6]]],["usize"]]],[0,"consts",R[0],"Global constants",N,N],[17,"HALT","riscv_5stage_simulator::consts","Special simulator-only instruction signal to halt simulator.",N,N],[17,"WORD_SIZE",E,"Sizes in bytes.",N,N],[17,"HALFWORD_SIZE",E,E,N,N],[17,"BYTE_SIZE",E,E,N,N],[17,"NOP",E,"A canonical RISC-V NOP, encoded as ADDI x0, x0, 0.",N,N],[17,"FUNCT7_MASK",E,E,N,N],[17,"FUNCT3_MASK",E,E,N,N],[17,"RS1_MASK",E,E,N,N],[17,"RS2_MASK",E,E,N,N],[17,"RD_MASK",E,E,N,N],[17,"OPCODE_MASK",E,E,N,N],[17,"BIT30_MASK",E,E,N,N],[17,"FUNCT7_SHIFT",E,E,N,N],[17,"FUNCT3_SHIFT",E,E,N,N],[17,"RS1_SHIFT",E,E,N,N],[17,"RS2_SHIFT",E,E,N,N],[17,"RD_SHIFT",E,E,N,N],[17,"BIT30_SHIFT",E,E,N,N],[0,"hazards",R[0],"Data hazard detection.",N,N],[5,"ex_hazard_src1","riscv_5stage_simulator::hazards","Indicates ALU src1 should be forwarded from the previous…",N,[[[R[1]]],["bool"]]],[5,"ex_hazard_src2",E,"Indicates ALU src2 should be forwarded from the previous…",N,[[[R[1]]],["bool"]]],[5,"mem_hazard_src1",E,"Indicates ALU src1 should be forwarded from data memory or…",N,[[[R[1]]],["bool"]]],[5,"mem_hazard_src2",E,"Indicates ALU src2 should be forwarded from data memory or…",N,[[[R[1]]],["bool"]]],[5,"load_hazard",E,"Indicates a load-use hazard that will require a pipeline…",N,[[[R[1]]],["bool"]]],[5,"reg_hazard_src1",E,"Indicates src1 register was just written to and should be…",N,[[[R[2]],[R[1]]],["bool"]]],[5,"reg_hazard_src2",E,"Indicates src2 register was just written to and should be…",N,[[[R[2]],[R[1]]],["bool"]]],[0,"immediates",R[0],R[3],N,N],[5,"gen","riscv_5stage_simulator::immediates",R[3],N,[[[R[2]]],[["u32"],["option",["u32"]]]]],[0,"ia_simulator",R[0],"Single cycle instruction accurate RISC-V 32I simulator.",N,N],[5,"run","riscv_5stage_simulator::ia_simulator","Runs a single cycle instruction accurate RISC-V 32I…",N,[[[R[4]],[R[5]],[R[6]]],["usize"]]],[0,R[2],R[0],"Instruction decode stage.",N,N],[3,R[46],R[9],"A single machine instruction.",N,N],[12,R[7],E,"Category of the instruction, e.g., load, branch, or op",2,N],[12,"format",E,"Format associated with the opcode, e.g., R-type or I-type",2,N],[12,R[44],E,"Struct for accessing the subfields' bits",2,N],[12,R[37],E,"Instruction's mnemonic, e.g., JAL, XOR, or SRA",2,N],[12,R[38],E,"Control unit semantics (dictates control lines to be…",2,N],[3,"Fields",E,"RISC-V 32I fields (shamt -> imm).",N,N],[12,"rs1",E,E,3,N],[12,"rs2",E,E,3,N],[12,"rd",E,E,3,N],[12,"funct3",E,E,3,N],[12,"funct7",E,E,3,N],[12,"imm",E,E,3,N],[12,R[7],E,E,3,N],[3,R[47],E,"Control unit semantics",N,N],[12,"branch",E,E,4,N],[12,"mem_read",E,E,4,N],[12,"mem_to_reg",E,E,4,N],[12,"alu_op",E,E,4,N],[12,"mem_write",E,E,4,N],[12,"alu_src",E,E,4,N],[12,"reg_write",E,E,4,N],[12,"mem_size",E,E,4,N],[4,"Opcode",E,"RISC-V 32I opcodes.",N,N],[13,"Lui",E,E,5,N],[13,"AuiPc",E,E,5,N],[13,"Jal",E,E,5,N],[13,"Jalr",E,E,5,N],[13,"Branch",E,E,5,N],[13,"Load",E,E,5,N],[13,"Store",E,E,5,N],[13,"Op",E,E,5,N],[13,"OpImm",E,E,5,N],[13,"Halt",E,E,5,N],[4,"Format",E,"RISC-V 32I instruction formats.",N,N],[13,"R",E,E,6,N],[13,"I",E,E,6,N],[13,"S",E,E,6,N],[13,"B",E,E,6,N],[13,"U",E,E,6,N],[13,"J",E,E,6,N],[4,R[48],E,"RISC-V 32I mnemonics.",N,N],[13,"Lui",E,"Load upper immediate",7,N],[13,"AuiPc",E,"Add upper immediate to PC",7,N],[13,"Jal",E,"Jump and link",7,N],[13,"Jalr",E,"Jump and link register",7,N],[13,"Beq",E,"Branch if equal",7,N],[13,"Bne",E,"Branch if not equal",7,N],[13,"Blt",E,"Branch if less than",7,N],[13,"Bge",E,"Branch if greater or equal",7,N],[13,"Bltu",E,"Branch if less than (unsigned)",7,N],[13,"Bgeu",E,"Branch if greater or equal (unsigned)",7,N],[13,"Lb",E,"Load byte",7,N],[13,"Lh",E,"Load halfword",7,N],[13,"Lw",E,"Load word",7,N],[13,"Lbu",E,"Load byte (unsigned)",7,N],[13,"Lhu",E,"Load halfword (unsigned)",7,N],[13,"Sb",E,"Store byte",7,N],[13,"Sh",E,"Store halfword",7,N],[13,"Sw",E,"Store word",7,N],[13,"Addi",E,"Add immediate",7,N],[13,"Slti",E,"Set less than immediate",7,N],[13,"Sltiu",E,"Set less than immediate (unsigned)",7,N],[13,"Xori",E,"Exclusive or immediate",7,N],[13,"Ori",E,"Logical Or immediate",7,N],[13,"Andi",E,"Logical And immediate",7,N],[13,"Slli",E,"Shift left logical immediate",7,N],[13,"Srli",E,"Shift right logical immediate",7,N],[13,"Srai",E,"Shift right arithmetic immediate",7,N],[13,"Add",E,"Add",7,N],[13,"Sub",E,"Subtract",7,N],[13,"Sll",E,"Shift left logical",7,N],[13,"Slt",E,"Set less than",7,N],[13,"Sltu",E,"Set less than unsigned",7,N],[13,"Xor",E,"Exclusive or",7,N],[13,"Srl",E,"Shift right logical",7,N],[13,"Sra",E,"Shift right arithmetic",7,N],[13,"Or",E,"Logical Or",7,N],[13,"And",E,"Logical And",7,N],[13,"Halt",E,"Halt simulator",7,N],[0,"decoder",E,R[8],N,N],[5,"decode","riscv_5stage_simulator::instruction::decoder",R[8],N,[[[R[2]]]]],[11,"new",R[9],"Constructs a new `Instruction`.",2,[[["u32"]],[R[2]]]],[11,"as_u32",E,"Returns the original instruction integer.",2,[[["self"]],["u32"]]],[0,"memory",R[0],"Harvard architecture (separate instruction and data)…",N,N],[0,"data",R[11],R[10],N,N],[3,R[49],R[33],R[10],N,N],[11,"new",E,"Constructs a new `DataMemory`.",8,[[["usize"]],[R[5]]]],[11,"read",E,"Reads `size` (1, 2, or 4) bytes from memory.",8,[[["self"],["usize"]],["u32"]]],[11,"write",E,"Writes the lower `size` (1, 2, or 4) bytes of `data` to…",8,[[["self"],["u32"],["usize"]]]],[0,R[2],R[11],"Read-only instruction memory.",N,N],[3,R[51],R[34],"Instruction memory that populates memory from disassembler…",N,N],[3,R[52],E,E,N,N],[8,R[50],E,"A read-only instruction memory trait.",N,N],[10,"read",E,E,9,[[["self"],["usize"]],["u32"]]],[11,"new",E,"Constructs a new `DisassemblyInstructionMemory`.",10,[[["file"]],["disassemblyinstructionmemory"]]],[11,"new",E,E,11,[[["vec",["u32"]],["u32"]],["testinstructionmemory"]]],[0,R[1],R[0],"Pipeline definition.",N,N],[3,R[53],R[13],"Pipeline holding four inter-stage registers",N,N],[12,"if_id",E,E,12,N],[12,"id_ex",E,E,12,N],[12,"ex_mem",E,E,12,N],[12,"mem_wb",E,E,12,N],[3,R[54],E,"Pipeline register between instruction fetch and…",N,N],[12,"pc",E,"Program Counter",13,N],[12,"raw_insn",E,"Raw instruction",13,N],[3,R[55],E,"Pipeline register between instruction decode and execution…",N,N],[12,"pc",E,E,14,N],[12,"insn",E,E,14,N],[12,"rs1",E,E,14,N],[12,"rs2",E,E,14,N],[3,R[56],E,"Pipeline register between execution and memory stages.",N,N],[12,"pc",E,E,15,N],[12,"insn",E,E,15,N],[12,R[12],E,E,15,N],[12,"rs2",E,E,15,N],[12,"halt_addr",E,E,15,N],[3,R[57],E,"Pipeline register between memory and writeback stages.",N,N],[12,"pc",E,E,16,N],[12,"insn",E,E,16,N],[12,R[12],E,E,16,N],[12,"mem_result",E,E,16,N],[0,"stages",E,"Five stage instruction execution with pipeline control.",N,N],[5,R[15],"riscv_5stage_simulator::pipeline::stages",R[16],N,[[[R[1]],[R[4]],["u64"],[R[6]]]]],[5,R[17],E,"ID: Instruction decode and register read",N,[[[R[1]],[R[1]],["u64"],[R[6]]]]],[5,"execute",E,R[18],N,[[[R[1]],[R[1]],["u64"]]]],[5,R[19],E,R[20],N,[[[R[1]],[R[1]],[R[5]],["u64"],[R[6]]]]],[5,R[21],E,R[22],N,[[["u64"],[R[1]],[R[6]]]]],[11,"new",R[13],E,12,[[],[R[1]]]],[11,"new",E,E,13,[[],[R[39]]]],[11,"new",E,E,14,[[],[R[40]]]],[11,"new",E,E,15,[[],[R[41]]]],[11,"new",E,E,16,[[],[R[42]]]],[0,R[14],R[0],"32-bit register and RV32I register file.",N,N],[3,R[58],R[35],"A complete RV32I register file.",N,N],[12,"pc",E,E,17,N],[12,"gpr",E,E,17,N],[3,R[59],E,"A write-protectable register.",N,N],[11,"new",E,"Constructs a new `RegisterFile`.",17,[[["u32"]],[R[6]]]],[11,"new",E,"Constructs a new `Register`.",18,[[["u32"],["bool"]],[R[14]]]],[11,"read",E,"Reads the register's value.",18,[[["self"]],["u32"]]],[11,"write",E,"Writes `value` to the register if it's writable, otherwise…",18,[[["self"],["u32"]]]],[0,"stages",R[0],"5-stage instruction execution.",N,N],[5,R[15],"riscv_5stage_simulator::stages",R[16],N,[[[R[4]],["u32"],["u64"]],["u32"]]],[5,R[17],E,"ID 1: Instruction decode",N,[[["u32"],["u64"]],[R[2]]]],[5,"reg_read",E,"ID 2: Register read",N,[[[R[2]],[R[6]],["u64"]]]],[5,"execute",E,R[18],N,[[["i32"],["u64"],[R[2]]],["i32"]]],[5,R[19],E,R[20],N,[[[R[2]],["i32"],[R[5]],["u64"]],["u32"]]],[5,R[21],E,R[22],N,[[["u32"],[R[2]],["i32"],["u64"],[R[6]]]]],[11,R[24],R[23],E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[[U]],[R[29]]]],[11,R[27],E,E,0,[[],[R[29]]]],[11,R[28],E,E,0,[[["self"]],[T]]],[11,R[31],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[32]]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[[U]],[R[29]]]],[11,R[27],E,E,1,[[],[R[29]]]],[11,R[28],E,E,1,[[["self"]],[T]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[R[32]]]],[11,R[24],R[9],E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[[U]],[R[29]]]],[11,R[27],E,E,2,[[],[R[29]]]],[11,R[28],E,E,2,[[["self"]],[T]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"]],[R[32]]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[[U]],[R[29]]]],[11,R[27],E,E,3,[[],[R[29]]]],[11,R[28],E,E,3,[[["self"]],[T]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[R[32]]]],[11,R[24],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[[U]],[R[29]]]],[11,R[27],E,E,4,[[],[R[29]]]],[11,R[28],E,E,4,[[["self"]],[T]]],[11,R[31],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"]],[R[32]]]],[11,R[24],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[[U]],[R[29]]]],[11,R[27],E,E,5,[[],[R[29]]]],[11,R[28],E,E,5,[[["self"]],[T]]],[11,R[31],E,E,5,[[["self"]],[T]]],[11,R[30],E,E,5,[[["self"]],[R[32]]]],[11,R[24],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[[U]],[R[29]]]],[11,R[27],E,E,6,[[],[R[29]]]],[11,R[28],E,E,6,[[["self"]],[T]]],[11,R[31],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"]],[R[32]]]],[11,R[24],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[26],E,E,7,[[[U]],[R[29]]]],[11,R[27],E,E,7,[[],[R[29]]]],[11,R[28],E,E,7,[[["self"]],[T]]],[11,R[31],E,E,7,[[["self"]],[T]]],[11,R[30],E,E,7,[[["self"]],[R[32]]]],[11,"from",R[33],E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[[U]],[R[29]]]],[11,R[27],E,E,8,[[],[R[29]]]],[11,R[28],E,E,8,[[["self"]],[T]]],[11,R[31],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"]],[R[32]]]],[11,"from",R[34],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[26],E,E,10,[[[U]],[R[29]]]],[11,R[27],E,E,10,[[],[R[29]]]],[11,R[28],E,E,10,[[["self"]],[T]]],[11,R[31],E,E,10,[[["self"]],[T]]],[11,R[30],E,E,10,[[["self"]],[R[32]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[[U]],[R[29]]]],[11,R[27],E,E,11,[[],[R[29]]]],[11,R[28],E,E,11,[[["self"]],[T]]],[11,R[31],E,E,11,[[["self"]],[T]]],[11,R[30],E,E,11,[[["self"]],[R[32]]]],[11,R[24],R[13],E,12,[[["self"]],[T]]],[11,R[25],E,E,12,[[["self"],[T]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[26],E,E,12,[[[U]],[R[29]]]],[11,R[27],E,E,12,[[],[R[29]]]],[11,R[28],E,E,12,[[["self"]],[T]]],[11,R[31],E,E,12,[[["self"]],[T]]],[11,R[30],E,E,12,[[["self"]],[R[32]]]],[11,R[24],E,E,13,[[["self"]],[T]]],[11,R[25],E,E,13,[[["self"],[T]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[26],E,E,13,[[[U]],[R[29]]]],[11,R[27],E,E,13,[[],[R[29]]]],[11,R[28],E,E,13,[[["self"]],[T]]],[11,R[31],E,E,13,[[["self"]],[T]]],[11,R[30],E,E,13,[[["self"]],[R[32]]]],[11,R[24],E,E,14,[[["self"]],[T]]],[11,R[25],E,E,14,[[["self"],[T]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[26],E,E,14,[[[U]],[R[29]]]],[11,R[27],E,E,14,[[],[R[29]]]],[11,R[28],E,E,14,[[["self"]],[T]]],[11,R[31],E,E,14,[[["self"]],[T]]],[11,R[30],E,E,14,[[["self"]],[R[32]]]],[11,R[24],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"],[T]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[26],E,E,15,[[[U]],[R[29]]]],[11,R[27],E,E,15,[[],[R[29]]]],[11,R[28],E,E,15,[[["self"]],[T]]],[11,R[31],E,E,15,[[["self"]],[T]]],[11,R[30],E,E,15,[[["self"]],[R[32]]]],[11,R[24],E,E,16,[[["self"]],[T]]],[11,R[25],E,E,16,[[["self"],[T]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[26],E,E,16,[[[U]],[R[29]]]],[11,R[27],E,E,16,[[],[R[29]]]],[11,R[28],E,E,16,[[["self"]],[T]]],[11,R[31],E,E,16,[[["self"]],[T]]],[11,R[30],E,E,16,[[["self"]],[R[32]]]],[11,"from",R[35],E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[26],E,E,17,[[[U]],[R[29]]]],[11,R[27],E,E,17,[[],[R[29]]]],[11,R[28],E,E,17,[[["self"]],[T]]],[11,R[31],E,E,17,[[["self"]],[T]]],[11,R[30],E,E,17,[[["self"]],[R[32]]]],[11,R[24],E,E,18,[[["self"]],[T]]],[11,R[25],E,E,18,[[["self"],[T]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[26],E,E,18,[[[U]],[R[29]]]],[11,R[27],E,E,18,[[],[R[29]]]],[11,R[28],E,E,18,[[["self"]],[T]]],[11,R[31],E,E,18,[[["self"]],[T]]],[11,R[30],E,E,18,[[["self"]],[R[32]]]],[11,"read",R[34],R[36],10,[[["self"],["usize"]],["u32"]]],[11,"read",E,R[36],11,[[["self"],["usize"]],["u32"]]],[11,"clone",R[23],E,0,[[["self"]],["aluop"]]],[11,"clone",E,E,1,[[["self"]],["alusrc"]]],[11,"clone",R[9],E,2,[[["self"]],[R[2]]]],[11,"clone",E,E,3,[[["self"]],[R[44]]]],[11,"clone",E,E,5,[[["self"]],[R[7]]]],[11,"clone",E,E,6,[[["self"]],["format"]]],[11,"clone",E,E,7,[[["self"]],[R[37]]]],[11,"clone",E,E,4,[[["self"]],[R[38]]]],[11,"clone",R[13],E,12,[[["self"]],[R[1]]]],[11,"clone",E,E,13,[[["self"]],[R[39]]]],[11,"clone",E,E,14,[[["self"]],[R[40]]]],[11,"clone",E,E,15,[[["self"]],[R[41]]]],[11,"clone",E,E,16,[[["self"]],[R[42]]]],[11,"clone",R[35],E,18,[[["self"]],[R[14]]]],[11,R[43],R[23],E,0,[[],["aluop"]]],[11,R[43],E,E,1,[[],["alusrc"]]],[11,R[43],R[9],"Constructs a canonical NOP encoded as ADDI x0, x0, 0.",2,[[],[R[2]]]],[11,R[43],E,E,3,[[],[R[44]]]],[11,R[43],E,E,4,[[],[R[38]]]],[11,"eq",R[23],E,0,[[["self"],["aluop"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["alusrc"]],["bool"]]],[11,"eq",R[9],E,3,[[["self"],[R[44]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[44]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[7]]],["bool"]]],[11,"eq",E,E,6,[[["self"],["format"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[37]]],["bool"]]],[11,"fmt",R[23],E,0,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,1,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",R[9],E,2,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,3,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,5,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,6,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,7,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,4,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",R[13],E,12,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,13,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,14,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,15,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,16,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",R[35],E,17,[[["self"],[R[45]]],[R[29]]]],[11,"fmt",E,E,18,[[["self"],[R[45]]],[R[29]]]]],"p":[[4,"AluOp"],[4,"AluSrc"],[3,R[46]],[3,"Fields"],[3,R[47]],[4,"Opcode"],[4,"Format"],[4,R[48]],[3,R[49]],[8,R[50]],[3,R[51]],[3,R[52]],[3,R[53]],[3,R[54]],[3,R[55]],[3,R[56]],[3,R[57]],[3,R[58]],[3,R[59]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);